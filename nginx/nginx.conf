upstream web_server {
    server backend:8000;
}

error_log /var/log/nginx/error.log debug;
proxy_cache_path /tmp keys_zone=mycache:10m inactive=10m use_temp_path=off;

server {

    listen 80;
    client_max_body_size 100M;
    
    location ~* /gallery/.+\.(?:gif|jpg|jpeg|png)$ {

        proxy_request_buffering off;

        proxy_pass http://web_server;
        proxy_cache_min_uses 2;
        proxy_cache_key $uri;
        proxy_cache mycache;
        proxy_cache_methods GET HEAD POST;
        add_header X-Cache-Status $upstream_cache_status;
        #proxy_cache_bypass $http_secret_header;
        proxy_cache_bypass $http_x_update;
        
        expires 30d;
        add_header Cache-Control "public, no-transform";

        add_header Vary Accept-Encoding;               
    }

    location / {
        proxy_pass http://web_server;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect off;        
	    
    }

    location ~/gallery/(\w+) {

        if ($request_method = OPTIONS ) {  
            add_header Access-Control-Allow-Origin *;
            add_header 'Access-Control-Allow-Methods' 'DELETE, OPTIONS';          
            add_header Content-Type application/json;
            return 200;
        }
        if ($request_method = DELETE) {
            add_header Access-Control-Allow-Origin *;
            add_header 'Access-Control-Allow-Methods' 'DELETE, OPTIONS';
            set  $last_path_component  $1;
            content_by_lua_block {
                function file_exists(name)
                    local f=io.open(name,"r")
                    if f~=nil then io.close(f) return true else return false end
                end

                local file_path = "/tmp/" .. ngx.var.last_path_component

                if (file_exists(file_path)) then
                    os.remove(file_path)
                end

            }

        }
    }
    


}
